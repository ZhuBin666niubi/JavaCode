package com.zero.Chapter05;
/*
前面我们已经学习完了字符串，现在我们来学习一下数组。
 */
public class Example12 {
    public static void main(String[] args) {
        example03();
    }
    /*
    数组是具有相同数据类型的一组数据的集合。其中，存在一种数组叫做一维数组。一维数组实质上是一组相同类型数据的线性集合。接下来我们来学习
    // 一维数组的创建和使用。
     */
    public static void example01(){
        //数组作为对象允许使用new关键字进行内存分配，在使用数组之前，我们必须先定义数组变量所属的类型。创建一维数组有两种方法：
        int arr[];
        String [] array;
        /*上面两种方法，一种是数据类型+[]+数组名称；第二种是数据类型+数组名称+[]。声明数组之后，我们不能立刻使用它，因为声明
        数组只是给出了数组名字和元素的数据类型，要真正使用它，必须要分配给它相应的存储空间。在为数组分配存储空间的时候必须指明
        数组的长度。为数组分配内存空间的语法格式如下：
         */
        arr = new int[5];
        array=new String[10];
        //在使用new关键字为整型数组分配内存空间的时候，整型数组中的各个元素的初始值都是0。
        byte b[]=new byte[5];//我们也可以直接声明并且给它分配内存空间。
    }
    public static void example02(){
        //了解了一维数组的创建，现在我们来学习一下怎么使用一维数组。
        //在使用一维数组之前，我们需要了解一下，数组和基本数据类型一样，都可以进行初始化操作，数组的初始化有两种形式：
        int arr[]=new int[]{1,2,3,4,5};
        int arr2[]={1,2,3,4,5};
        System.out.println("--------");
        //现在我们来使用数组。
        int day[]={31,28,31,30,31,30,31,31,30,31,30,31};
        for(int i=0;i<day.length;i++){
            System.out.println((i+1)+"月有"+day[i]+"天");
        }
        //这就是一维数组的使用，将一系列相同数据类型的数据以线性形式存储在内存空间中，程序员通过数组下标可以访问这些数据。
        //数组的下标从0开始，数组的下标是数组的一个索引，索引是从0开始的，索引的范围是0~数组的长度-1。
    }
    public static void example03(){
        //学习完一维数组的创建和使用，现在我们来看看二维数组的创建和使用。
        //二维数组可以看成是特殊的一维数组，也就是一个一维数组，它里面的每一个元素都是一个数组。
        int arr[][];
        String str_arr[][];
        boolean b[][]=new boolean[3][4];
        System.out.println("--------");
        int array[][]=new int[][]{{1,2},{3,4},{5,6},{7,8}};
        for(int i=0;i<array.length;i++){
            for(int j=0;j<array[i].length;j++){
                System.out.print(array[i][j]+" ");
            }
        }
    }
}
